{"name":"vim-ping-cursor","tagline":"Vim plugin to help you quickly locate the cursor position","body":"# ping-cursor.vim\r\n\r\n*Shedding light on your cursor location when you have lost it in the muck*\r\n\r\n![](http://www.evernote.com/shard/s78/sh/27d7c347-c82e-499e-ae3d-7cc9e62e006f/010c66370987f9ccf8f1fe7cc628a9f6/deep/0/Screenshot%205/8/13%2011:10%20PM.png)\r\n\r\n## What it provides?\r\n\r\nThis plugin provides a user-command called `PingCursor` which illuminates the\r\ncurrent location of the cursor temporarily so that you can easily find it.\r\nPlease see the *Configuration* section for details on how best to utilize the\r\n`PingCursor` command.\r\n\r\n## Installation\r\n\r\nIf you don't have a preferred installation method, I recommend installing\r\n[pathogen.vim](https://github.com/tpope/vim-pathogen) and using it in\r\ncombination with [git\r\nsubmodules](http://git-scm.com/book/en/Git-Tools-Submodules) as describe in\r\nthis [Vimcast - Synchronizing plugins with git submodules and\r\npathogen](http://vimcasts.org/episodes/synchronizing-plugins-with-git-submodules-and-pathogen/).\r\n\r\nIf your installation method is the above recommended one, it should be as\r\nsimple as running the following commands:\r\n\r\n    cd ~/.vim/\r\n    git submodule add git@github.com:cyphactor/vim-ping-cursor.git bundle/vim-ping-cursor\r\n    git add .\r\n    git commit -m \"Added vim-ping-cursor plugin to my setup.\"\r\n\r\nIf you are using another method, you are on your own. I have been told that\r\nthis plugin is compatible with [Vundle](http://github.com/gmarik/vundle)\r\nthough I have not tested it myself.\r\n\r\n## Configuration\r\n\r\nThe recommended configuration for this plugin is to simply map a key combo to\r\nrun the `PingCursor` command for you. This can easily be done by adding the\r\nfollowing to your `~/.vimrc`.\r\n\r\n    nnoremap <leader>p :PingCursor<cr>\r\n\r\nIn the above example I map my normal mode `<leader>p` key combo to execute the\r\n`PingCursor` command, in turn highlighting the current location of my cursor\r\nmomentarily.\r\n\r\nYou can of course map this command anyway you like, or even choose not to map\r\nit and just execute the command as follows when you need it.\r\n\r\n    :PingCursor<cr>\r\n\r\n## Why I Built This\r\n\r\n### Initial Impetus\r\n\r\nLet me start out by explaining a scenario that happens to me at work on a\r\nrelatively regular basis. I often find myself working deep in the ticket of\r\ncode, when all of the sudden I am distracted by another co-worker asking a\r\nquestion or simply making some noise. I found not being able to find my cursor\r\nquickly frustrating.\r\n\r\n### First Attempt\r\n\r\nSo, I thought to myself, I wonder if [Vim](http://www.vim.org/) has cursor row\r\nhighlighting or possibly even cursor column highlighting. Sure enough\r\n[Vim](http://www.vim.org/) has both and enabling them was as simple as setting\r\nthe following in my `.vimrc`.\r\n\r\n    set cursorline\r\n    set cursorcolumn\r\n\r\n### The Problem\r\n\r\nIt turns out, the `cursorcolumn` option when enabled causes the full screen to\r\nredraw. You might be thinking to yourself, that should not be a problem, I\r\nhave a very fast machine and it is just some text. I am sorry to inform you\r\nthat you are wrong.  It turns out that redrawing the full screen is quite\r\ncostly in [Vim](http://www.vim.org/). More importently redrawing the full\r\nscreen interacts with lots of other features like *cursor movement*, *Ctrl-p\r\nbased completion*, and many others. This means that if you have cursor\r\nhighlighting on and use any of those features your [Vim](http://www.vim.org/)\r\nperformance will tank during those operations.\r\n\r\n### The Solution\r\n\r\nThe following are a number of threads, blogs, etc. where I found people\r\ndiscussing this issue and trying to come up with work arounds for this issue.\r\n\r\n* [http://vim.1045645.n5.nabble.com/Vim-7-slows-down-when-highlighting-cursor-line-td1148280.html](http://vim.1045645.n5.nabble.com/Vim-7-slows-down-when-highlighting-cursor-line-td1148280.html)\r\n* [https://gist.github.com/pera/2624765](https://gist.github.com/pera/2624765)\r\n* [http://briancarper.net/blog/590/cursorcolumn--cursorline-slowdown](http://briancarper.net/blog/590/cursorcolumn--cursorline-slowdown)\r\n\r\nAfter testing out a number of these work arounds I finally ended up deciding\r\nto use the cursor pinging solution described in [Brian Caprer's blog\r\npost](http://briancarper.net/blog/590/cursorcolumn--cursorline-slowdown) and\r\ncreate a [Vim](http://www.vim.org/) plugin so other people could easily obtain\r\nthis work around.\r\n\r\n## Credits\r\n\r\nMost of the credit here should go to Brian Carper because he provided a very\r\nvaluable [blog\r\npost](http://briancarper.net/blog/590/cursorcolumn--cursorline-slowdown) that\r\nI used as the basis for this vim plugin.\r\n\r\nCredit must also go out to all the others out there that struggled with this\r\nissue as I did and dug in to [Vim](http://www.vim.org/) enough to understand\r\nwhat was actually happening.\r\n\r\n## License\r\n\r\nCopyright (c) Andrew De Ponte. Distributed under the same terms as Vim itself.\r\nSee `:help license`.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}